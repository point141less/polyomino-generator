<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Polyomino Generator</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
</head>
<body>
  <h1>Polyomino Generator</h1>
  <p>Press "Generate" to create polyominoes.</p>
  <!-- Create a div where P5.js will place the canvas -->
  <div id="polyomino-generator"></div>
  
  <script>
    let gridSize = 20; // Size of each grid cell for display
    let maxPolyominoes = 1000; // Total number of polyominoes to generate
    let polyominoes = []; // Array to store unique polyomino shapes

    function setup() {
      let canvas = createCanvas(800, 800);
      canvas.parent('polyomino-generator'); // Place the canvas in the div
      noLoop(); // Run the draw loop only once
      generatePolyominoes(1, [[0, 0]]); // Start with a monomino (1 square)
    }

    function draw() {
      background(255);
      displayPolyominoes();
    }

    // Recursive function to generate polyominoes
    function generatePolyominoes(size, polyomino) {
      if (polyominoes.length >= maxPolyominoes) return; // Stop if we reach the target

      // Check if this polyomino shape is unique before adding it
      if (!isDuplicate(polyomino)) {
        polyominoes.push(polyomino.map(cell => [...cell])); // Clone and store it
      }

      // Stop recursion if we reach the target size
      if (size >= 5) return; // Limit the size to 5 squares for manageable shapes

      // Try adding a new square in each direction for each cell in the current polyomino
      for (let cell of polyomino) {
        let [x, y] = cell;
        let directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]; // Right, left, down, up

        for (let [dx, dy] of directions) {
          let newX = x + dx;
          let newY = y + dy;

          // Check if the new square overlaps with existing cells
          if (!polyomino.some(([cx, cy]) => cx === newX && cy === newY)) {
            let newPolyomino = polyomino.concat([[newX, newY]]);
            generatePolyominoes(size + 1, newPolyomino); // Recurse with new shape
          }
        }
      }
    }

    // Check if a generated polyomino is a duplicate
    function isDuplicate(newPolyomino) {
      return polyominoes.some(existingPolyomino => arePolyominoesEqual(existingPolyomino, newPolyomino));
    }

    // Compare two polyomino shapes
    function arePolyominoesEqual(poly1, poly2) {
      if (poly1.length !== poly2.length) return false;
      let sorted1 = poly1.map(cell => cell.join(',')).sort();
      let sorted2 = poly2.map(cell => cell.join(',')).sort();
      return sorted1.every((cell, idx) => cell === sorted2[idx]);
    }

    // Display the generated polyominoes on the canvas
    function displayPolyominoes() {
      let cols = floor(width / (gridSize * 5)); // Number of polyominoes per row
      for (let i = 0; i < polyominoes.length && i < maxPolyominoes; i++) {
        let polyomino = polyominoes[i];
        let startX = (i % cols) * gridSize * 5 + gridSize * 2;
        let startY = floor(i / cols) * gridSize * 5 + gridSize * 2;

        // Draw each cell of the polyomino
        fill(100, 150, 255);
        for (let [x, y] of polyomino) {
          rect(startX + x * gridSize, startY + y * gridSize, gridSize, gridSize);
        }
      }
    }
  </script>
</body>
</html>
